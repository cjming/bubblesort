<?php

/**
 * Implements hook_menu().
 */
function bubblesort_menu() {

  $items = array();

  $items['bubblesort'] = array(
    'title' => 'BubbleSort Simulation',
    'description' => 'BubbleSort creates a bar chart of integers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblesort_form'),
    'access callback' => TRUE
  );
  $items['bubblesort/json'] = array(
    'page callback' => 'bubblesort_json',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Build form.
 */
function bubblesort_form($form, &$form_state) {

    $form['#theme'] = array('bubblesort_theme');

    $form['#attached']['css'] = array(
      drupal_get_path('module', 'bubblesort') . '/css/bubblesort.css',
    );
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'bubblesort') . '/js/bubblesort.js',
      drupal_get_path('module', 'bubblesort') . '/js/d3.min.js',
    );
    $form['total_markup'] = array(
      '#markup' => '<p>Enter the total number of integers to be graphed:</p>'
    );
    $form['number_integers'] = array(
      '#type' => 'textfield',
      '#title' => t('Total Number of Integers (number of bars)'),
      '#size' => 2,
      '#maxlength' => 2,
      '#element_validate' => array('element_validate_integer_positive'),
    );
    $form['range_markup'] = array(
      '#markup' => '<p>Enter a range of integers for the BubbleSort Simulation:</p>'
    );
    $form['range_integers_1'] = array(
      '#type' => 'textfield',
      '#title' => t('First Integer'),
      '#size' => 2,
      '#maxlength' => 2,
      '#element_validate' => array('element_validate_integer_positive'),
    );
    $form['range_integers_2'] = array(
      '#type' => 'textfield',
      '#title' => t('Second Integer'),
      '#size' => 2,
      '#maxlength' => 2,
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $form['#validate'][] = 'bubblesort_form_validate';

    $form['submit_shuffle'] = array(
      '#type' => 'submit',
      '#value' => t('Shuffle'),
      '#submit' => array('bubblesort_form_submit_shuffle'),
    );
    $form['step_button'] = array(
      '#type' => 'button',
      '#value' => t('Step'),
      '#attributes' => array('onclick' => 'return (false);')
    );
    $form['play_button'] = array(
      '#type' => 'button',
      '#value' => t('Play'),
      '#attributes' => array('onclick' => 'return (false);')
    );

  return $form;
}

// Validation callback
function bubblesort_form_validate($form, &$form_state) {
  if ($form_state['values']['number_integers'] == 0) {
    form_set_error('number_integers', 'Number of integers must be greater than 0!"');
  }
  if ($form_state['values']['range_integers_1'] > $form_state['values']['range_integers_2']) {
    form_set_error('range_integers_2', '2nd integer must be greater than 1st integer!"');
  }
  if (empty($form_state['values']['range_integers_1'])) {
    form_set_error('range_integers_1', '1st integer should not be empty.');
  }
  if (empty($form_state['values']['range_integers_2'])) {
    form_set_error('range_integers_2', '2nd integer should not be empty.');
  }
  if ($form_state['values']['range_integers_1'] == $form_state['values']['range_integers_2']) {
    form_set_error('range_integers_1', '1st integer and 2nd integer cannot be equal!"');
  }
}

// Submit callback
function bubblesort_form_submit_shuffle($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_theme
 */
function bubblesort_theme($existing, $type, $theme, $path) {
  return array(
    'bubblesort_theme' => array(
      'render element' => 'form',
      'template' => 'form--bubblesort',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Menu callback for returning json
 */
function bubblesort_json($data) {
  if (empty($data)) {
    $numbers = numbers_generate();
  }
  else {
    $data_parts = explode('&', $data);
    foreach($data_parts as $part) {
      $fields[] = explode('=', $part);
    }

    foreach($fields as $field) {
      if (!empty($field[1])) {
        switch ($field[0]) {
          case 'number_integers':
            $total = $field[1];;
            break;
          case 'range_integers_1':
            $range1 = $field[1];
            break;
          case 'range_integers_2':
            $range2 = $field[1];
            break;
        }
      }
    }
    $numbers = numbers_generate($total, $range1, $range2, false);
  }
  return drupal_json_output($numbers);
}

/**
 * Helper function for generating numbers array
 */
function numbers_generate($total = 10, $range1 = 1, $range2 = 100, $sort = FALSE) {
  $numbers = range($range1, $range2);
  shuffle($numbers);
  $numbers=array_slice($numbers, 0, $total);
  if ($sort) {
    rsort($numbers);
  }
  return $numbers;
}
